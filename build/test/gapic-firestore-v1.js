"use strict";
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const mocha_1 = require("mocha");
const firestoreModule = require('../src');
const stream_1 = require("stream");
const FAKE_STATUS_CODE = 1;
class FakeError {
    constructor(n) {
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
class Operation {
    constructor() { }
    promise() { }
}
exports.Operation = Operation;
function mockSimpleGrpcMethod(expectedRequest, response, error) {
    return (actualRequest, options, callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        }
        else if (response) {
            callback(null, response);
        }
        else {
            callback(null);
        }
    };
}
function mockServerStreamingGrpcMethod(expectedRequest, response, error) {
    return (actualRequest) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        const mockStream = new stream_1.PassThrough({
            objectMode: true,
            transform: (chunk, enc, callback) => {
                if (error) {
                    callback(error);
                }
                else {
                    callback(null, response);
                }
            },
        });
        return mockStream;
    };
}
function mockBidiStreamingGrpcMethod(expectedRequest, response, error) {
    return () => {
        const mockStream = new stream_1.PassThrough({
            objectMode: true,
            transform: (chunk, enc, callback) => {
                assert.deepStrictEqual(chunk, expectedRequest);
                if (error) {
                    callback(error);
                }
                else {
                    callback(null, response);
                }
            },
        });
        return mockStream;
    };
}
mocha_1.describe('v1.FirestoreClient', () => {
    mocha_1.it('has servicePath', () => {
        const servicePath = firestoreModule.v1.FirestoreClient.servicePath;
        assert(servicePath);
    });
    mocha_1.it('has apiEndpoint', () => {
        const apiEndpoint = firestoreModule.v1.FirestoreClient.apiEndpoint;
        assert(apiEndpoint);
    });
    mocha_1.it('has port', () => {
        const port = firestoreModule.v1.FirestoreClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    mocha_1.it('should create a client with no option', () => {
        const client = new firestoreModule.v1.FirestoreClient();
        assert(client);
    });
    mocha_1.it('should create a client with gRPC fallback', () => {
        const client = new firestoreModule.v1.FirestoreClient({
            fallback: true,
        });
        assert(client);
    });
    mocha_1.describe('getDocument', () => {
        mocha_1.it('invokes getDocument without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getDocument = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.getDocument(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes getDocument with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getDocument = mockSimpleGrpcMethod(request, null, error);
            client.getDocument(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('createDocument', () => {
        mocha_1.it('invokes createDocument without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createDocument = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.createDocument(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes createDocument with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createDocument = mockSimpleGrpcMethod(request, null, error);
            client.createDocument(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('updateDocument', () => {
        mocha_1.it('invokes updateDocument without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            request.document = {};
            request.document.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateDocument = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.updateDocument(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes updateDocument with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            request.document = {};
            request.document.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateDocument = mockSimpleGrpcMethod(request, null, error);
            client.updateDocument(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('deleteDocument', () => {
        mocha_1.it('invokes deleteDocument without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteDocument = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.deleteDocument(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes deleteDocument with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteDocument = mockSimpleGrpcMethod(request, null, error);
            client.deleteDocument(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('beginTransaction', () => {
        mocha_1.it('invokes beginTransaction without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.beginTransaction = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.beginTransaction(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes beginTransaction with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.beginTransaction = mockSimpleGrpcMethod(request, null, error);
            client.beginTransaction(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('commit', () => {
        mocha_1.it('invokes commit without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.commit = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.commit(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes commit with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.commit = mockSimpleGrpcMethod(request, null, error);
            client.commit(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('rollback', () => {
        mocha_1.it('invokes rollback without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.rollback = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.rollback(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes rollback with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.rollback = mockSimpleGrpcMethod(request, null, error);
            client.rollback(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('batchGetDocuments', () => {
        mocha_1.it('invokes batchGetDocuments without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.batchGetDocuments = mockServerStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client.batchGetDocuments(request);
            stream.on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
            stream.on('error', (err) => {
                done(err);
            });
            stream.write();
        });
        mocha_1.it('invokes batchGetDocuments with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.batchGetDocuments = mockServerStreamingGrpcMethod(request, null, error);
            const stream = client.batchGetDocuments(request);
            stream.on('data', () => {
                assert.fail();
            });
            stream.on('error', (err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write();
        });
    });
    mocha_1.describe('runQuery', () => {
        mocha_1.it('invokes runQuery without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.runQuery = mockServerStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client.runQuery(request);
            stream.on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
            stream.on('error', (err) => {
                done(err);
            });
            stream.write();
        });
        mocha_1.it('invokes runQuery with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.runQuery = mockServerStreamingGrpcMethod(request, null, error);
            const stream = client.runQuery(request);
            stream.on('data', () => {
                assert.fail();
            });
            stream.on('error', (err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write();
        });
    });
    mocha_1.describe('write', () => {
        mocha_1.it('invokes write without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.write = mockBidiStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client
                .write()
                .on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
                .on('error', (err) => {
                done(err);
            });
            stream.write(request);
        });
        mocha_1.it('invokes write with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.write = mockBidiStreamingGrpcMethod(request, null, error);
            const stream = client
                .write()
                .on('data', () => {
                assert.fail();
            })
                .on('error', (err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write(request);
        });
    });
    mocha_1.describe('listen', () => {
        mocha_1.it('invokes listen without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.listen = mockBidiStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client
                .listen()
                .on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
                .on('error', (err) => {
                done(err);
            });
            stream.write(request);
        });
        mocha_1.it('invokes listen with error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.listen = mockBidiStreamingGrpcMethod(request, null, error);
            const stream = client
                .listen()
                .on('data', () => {
                assert.fail();
            })
                .on('error', (err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write(request);
        });
    });
    mocha_1.describe('listDocuments', () => {
        mocha_1.it('invokes listDocuments without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listDocuments = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listDocuments(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    mocha_1.describe('listDocumentsStream', () => {
        mocha_1.it('invokes listDocumentsStream without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listDocuments = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client
                .listDocumentsStream(request, {})
                .on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
                .on('error', (err) => {
                done(err);
            });
            stream.write(request);
        });
    });
    mocha_1.describe('listCollectionIds', () => {
        mocha_1.it('invokes listCollectionIds without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listCollectionIds = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listCollectionIds(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    mocha_1.describe('listCollectionIdsStream', () => {
        mocha_1.it('invokes listCollectionIdsStream without error', done => {
            const client = new firestoreModule.v1.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listCollectionIds = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client
                .listCollectionIdsStream(request, {})
                .on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
                .on('error', (err) => {
                done(err);
            });
            stream.write(request);
        });
    });
});
//# sourceMappingURL=gapic-firestore-v1.js.map