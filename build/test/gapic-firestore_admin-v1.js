"use strict";
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const mocha_1 = require("mocha");
const firestoreadminModule = require('../src');
const FAKE_STATUS_CODE = 1;
class FakeError {
    constructor(n) {
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
class Operation {
    constructor() { }
    promise() { }
}
exports.Operation = Operation;
function mockSimpleGrpcMethod(expectedRequest, response, error) {
    return (actualRequest, options, callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        }
        else if (response) {
            callback(null, response);
        }
        else {
            callback(null);
        }
    };
}
function mockLongRunningGrpcMethod(expectedRequest, response, error) {
    return (request) => {
        assert.deepStrictEqual(request, expectedRequest);
        const mockOperation = {
            promise() {
                return new Promise((resolve, reject) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve([response]);
                    }
                });
            },
        };
        return Promise.resolve([mockOperation]);
    };
}
mocha_1.describe('v1.FirestoreAdminClient', () => {
    mocha_1.it('has servicePath', () => {
        const servicePath = firestoreadminModule.v1.FirestoreAdminClient.servicePath;
        assert(servicePath);
    });
    mocha_1.it('has apiEndpoint', () => {
        const apiEndpoint = firestoreadminModule.v1.FirestoreAdminClient.apiEndpoint;
        assert(apiEndpoint);
    });
    mocha_1.it('has port', () => {
        const port = firestoreadminModule.v1.FirestoreAdminClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    mocha_1.it('should create a client with no option', () => {
        const client = new firestoreadminModule.v1.FirestoreAdminClient();
        assert(client);
    });
    mocha_1.it('should create a client with gRPC fallback', () => {
        const client = new firestoreadminModule.v1.FirestoreAdminClient({
            fallback: true,
        });
        assert(client);
    });
    mocha_1.describe('getIndex', () => {
        mocha_1.it('invokes getIndex without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getIndex = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.getIndex(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes getIndex with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getIndex = mockSimpleGrpcMethod(request, null, error);
            client.getIndex(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('deleteIndex', () => {
        mocha_1.it('invokes deleteIndex without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteIndex = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.deleteIndex(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes deleteIndex with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteIndex = mockSimpleGrpcMethod(request, null, error);
            client.deleteIndex(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('getField', () => {
        mocha_1.it('invokes getField without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getField = mockSimpleGrpcMethod(request, expectedResponse, null);
            client.getField(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
        mocha_1.it('invokes getField with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getField = mockSimpleGrpcMethod(request, null, error);
            client.getField(request, (err, response) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            });
        });
    });
    mocha_1.describe('createIndex', () => {
        mocha_1.it('invokes createIndex without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createIndex = mockLongRunningGrpcMethod(request, expectedResponse);
            client
                .createIndex(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then((responses) => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            })
                .catch((err) => {
                done(err);
            });
        });
        mocha_1.it('invokes createIndex with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createIndex = mockLongRunningGrpcMethod(request, null, error);
            client
                .createIndex(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then(() => {
                assert.fail();
            })
                .catch((err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
    mocha_1.describe('updateField', () => {
        mocha_1.it('invokes updateField without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            request.field = {};
            request.field.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateField = mockLongRunningGrpcMethod(request, expectedResponse);
            client
                .updateField(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then((responses) => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            })
                .catch((err) => {
                done(err);
            });
        });
        mocha_1.it('invokes updateField with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            request.field = {};
            request.field.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateField = mockLongRunningGrpcMethod(request, null, error);
            client
                .updateField(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then(() => {
                assert.fail();
            })
                .catch((err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
    mocha_1.describe('exportDocuments', () => {
        mocha_1.it('invokes exportDocuments without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.exportDocuments = mockLongRunningGrpcMethod(request, expectedResponse);
            client
                .exportDocuments(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then((responses) => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            })
                .catch((err) => {
                done(err);
            });
        });
        mocha_1.it('invokes exportDocuments with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.exportDocuments = mockLongRunningGrpcMethod(request, null, error);
            client
                .exportDocuments(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then(() => {
                assert.fail();
            })
                .catch((err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
    mocha_1.describe('importDocuments', () => {
        mocha_1.it('invokes importDocuments without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.importDocuments = mockLongRunningGrpcMethod(request, expectedResponse);
            client
                .importDocuments(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then((responses) => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            })
                .catch((err) => {
                done(err);
            });
        });
        mocha_1.it('invokes importDocuments with error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.importDocuments = mockLongRunningGrpcMethod(request, null, error);
            client
                .importDocuments(request)
                .then((responses) => {
                const operation = responses[0];
                return operation ? operation.promise() : {};
            })
                .then(() => {
                assert.fail();
            })
                .catch((err) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
    mocha_1.describe('listIndexes', () => {
        mocha_1.it('invokes listIndexes without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listIndexes = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listIndexes(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    mocha_1.describe('listIndexesStream', () => {
        mocha_1.it('invokes listIndexesStream without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listIndexes = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client
                .listIndexesStream(request, {})
                .on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
                .on('error', (err) => {
                done(err);
            });
            stream.write(request);
        });
    });
    mocha_1.describe('listFields', () => {
        mocha_1.it('invokes listFields without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listFields = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listFields(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    mocha_1.describe('listFieldsStream', () => {
        mocha_1.it('invokes listFieldsStream without error', done => {
            const client = new firestoreadminModule.v1.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listFields = (actualRequest, options, callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client
                .listFieldsStream(request, {})
                .on('data', (response) => {
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
                .on('error', (err) => {
                done(err);
            });
            stream.write(request);
        });
    });
});
//# sourceMappingURL=gapic-firestore_admin-v1.js.map